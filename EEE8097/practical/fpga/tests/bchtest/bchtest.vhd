-------------------------------------------------------------------------------
-- Parallel Encoder (ENTITY)
-- automatically generated by program 'venomgen'
-- 
-- Date Sat Jun 28 13:44:15 2014
-- 
-- poly: x^64 + x^62 + x^61 + x^59 + x^58 + x^55 + x^54 + x^53 + x^50 + x^49 +
-- x^48 + x^42 + x^41 + x^40 + x^39 + x^38 + x^37 + x^33 + x^30 + x^29 + x^27 + 
-- x^25 + x^24 + x^22 + x^21 + x^19 + x^18 + x^17 + x^16 + x^15 + x^12 + 
-- x^11 + x^8 + x^6 + x^5 + x^4 + x^2 + x^1 + 1
-------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY bch_enc IS
    PORT (
        clk     : IN    STD_LOGIC;
        enable  : IN    STD_LOGIC;
        reset   : IN    STD_LOGIC;
        d_in    : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
        out_enb : OUT   STD_LOGIC;
        rr      : OUT   STD_LOGIC_VECTOR(63 DOWNTO 0)
        );
END bch_enc;

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- Parallel Encoder (ARCHITECTURE)
-- automatically generated by program 'venomgen'
-- 
-- Date Sat Jun 28 13:44:15 2014
-- 
-- poly: x^64 + x^62 + x^61 + x^59 + x^58 + x^55 + x^54 + x^53 + x^50 + x^49 +
-- x^48 + x^42 + x^41 + x^40 + x^39 + x^38 + x^37 + x^33 + x^30 + x^29 + x^27 + 
-- x^25 + x^24 + x^22 + x^21 + x^19 + x^18 + x^17 + x^16 + x^15 + x^12 + 
-- x^11 + x^8 + x^6 + x^5 + x^4 + x^2 + x^1 + 1
-------------------------------------------------------------------------------

ARCHITECTURE rtl OF bch_enc IS

    CONSTANT nn    : INTEGER := 64;
        -- size of redundancy register

    CONSTANT bw    : INTEGER := 8;
        -- size of input words

-------------------------------------------------------------------------------

    SIGNAL xx        : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        -- copy of redundancy register for reading

-------------------------------------------------------------------------------

BEGIN

    main:
    PROCESS (clk,d_in,xx,reset)

        VARIABLE xx_next   : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        VARIABLE uu        : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);

    BEGIN

        -- combinatorial part: 

        FOR i IN 0 TO bw-1 LOOP
            uu(i) := d_in(i) XOR xx(nn-bw+i);
        END LOOP;

        xx_next(0) := uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR uu(3) XOR uu(2)
         XOR uu(0);
        xx_next(1) := uu(2) XOR uu(1) XOR uu(0);
        xx_next(2) := uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR uu(1) XOR uu(0)
            ;
        xx_next(3) := uu(7) XOR uu(6) XOR uu(5) XOR uu(2) XOR uu(1);
        xx_next(4) := uu(5) XOR uu(4) XOR uu(0);
        xx_next(5) := uu(7) XOR uu(4) XOR uu(3) XOR uu(2) XOR uu(1) XOR uu(0)
            ;
        xx_next(6) := uu(7) XOR uu(6) XOR uu(1) XOR uu(0);
        xx_next(7) := uu(7) XOR uu(2) XOR uu(1);
        xx_next(8) := xx(0) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR uu(0)
            ;
        xx_next(9) := xx(1) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(1);
        xx_next(10) := xx(2) XOR uu(7) XOR uu(6) XOR uu(2);
        xx_next(11) := xx(3) XOR uu(6) XOR uu(5) XOR uu(4) XOR uu(2) XOR uu(0)
            ;
        xx_next(12) := xx(4) XOR uu(4) XOR uu(2) XOR uu(1) XOR uu(0);
        xx_next(13) := xx(5) XOR uu(5) XOR uu(3) XOR uu(2) XOR uu(1);
        xx_next(14) := xx(6) XOR uu(6) XOR uu(4) XOR uu(3) XOR uu(2);
        xx_next(15) := xx(7) XOR uu(6) XOR uu(2) XOR uu(0);
        xx_next(16) := xx(8) XOR uu(6) XOR uu(5) XOR uu(4) XOR uu(2) XOR uu(1)
         XOR uu(0);
        xx_next(17) := xx(9) XOR uu(4) XOR uu(1) XOR uu(0);
        xx_next(18) := xx(10) XOR uu(7) XOR uu(6) XOR uu(4) XOR uu(3) XOR 
            uu(1) XOR uu(0);
        xx_next(19) := xx(11) XOR uu(6) XOR uu(3) XOR uu(1) XOR uu(0);
        xx_next(20) := xx(12) XOR uu(7) XOR uu(4) XOR uu(2) XOR uu(1);
        xx_next(21) := xx(13) XOR uu(7) XOR uu(6) XOR uu(4) XOR uu(0);
        xx_next(22) := xx(14) XOR uu(6) XOR uu(4) XOR uu(3) XOR uu(2) XOR 
            uu(1) XOR uu(0);
        xx_next(23) := xx(15) XOR uu(7) XOR uu(5) XOR uu(4) XOR uu(3) XOR 
            uu(2) XOR uu(1);
        xx_next(24) := xx(16) XOR uu(7) XOR uu(0);
        xx_next(25) := xx(17) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR 
            uu(3) XOR uu(2) XOR uu(1) XOR uu(0);
        xx_next(26) := xx(18) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR 
            uu(3) XOR uu(2) XOR uu(1);
        xx_next(27) := xx(19) XOR uu(0);
        xx_next(28) := xx(20) XOR uu(1);
        xx_next(29) := xx(21) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR 
            uu(3) XOR uu(0);
        xx_next(30) := xx(22) XOR uu(3) XOR uu(2) XOR uu(1) XOR uu(0);
        xx_next(31) := xx(23) XOR uu(4) XOR uu(3) XOR uu(2) XOR uu(1);
        xx_next(32) := xx(24) XOR uu(5) XOR uu(4) XOR uu(3) XOR uu(2);
        xx_next(33) := xx(25) XOR uu(7) XOR uu(2) XOR uu(0);
        xx_next(34) := xx(26) XOR uu(3) XOR uu(1);
        xx_next(35) := xx(27) XOR uu(4) XOR uu(2);
        xx_next(36) := xx(28) XOR uu(5) XOR uu(3);
        xx_next(37) := xx(29) XOR uu(7) XOR uu(5) XOR uu(3) XOR uu(2) XOR 
            uu(0);
        xx_next(38) := xx(30) XOR uu(7) XOR uu(5) XOR uu(2) XOR uu(1) XOR 
            uu(0);
        xx_next(39) := xx(31) XOR uu(7) XOR uu(5) XOR uu(4) XOR uu(1) XOR 
            uu(0);
        xx_next(40) := xx(32) XOR uu(7) XOR uu(4) XOR uu(3) XOR uu(1) XOR 
            uu(0);
        xx_next(41) := xx(33) XOR uu(7) XOR uu(6) XOR uu(3) XOR uu(1) XOR 
            uu(0);
        xx_next(42) := xx(34) XOR uu(6) XOR uu(5) XOR uu(3) XOR uu(1) XOR 
            uu(0);
        xx_next(43) := xx(35) XOR uu(7) XOR uu(6) XOR uu(4) XOR uu(2) XOR 
            uu(1);
        xx_next(44) := xx(36) XOR uu(7) XOR uu(5) XOR uu(3) XOR uu(2);
        xx_next(45) := xx(37) XOR uu(6) XOR uu(4) XOR uu(3);
        xx_next(46) := xx(38) XOR uu(7) XOR uu(5) XOR uu(4);
        xx_next(47) := xx(39) XOR uu(6) XOR uu(5);
        xx_next(48) := xx(40) XOR uu(5) XOR uu(4) XOR uu(3) XOR uu(2) XOR 
            uu(0);
        xx_next(49) := xx(41) XOR uu(7) XOR uu(2) XOR uu(1) XOR uu(0);
        xx_next(50) := xx(42) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR 
            uu(1) XOR uu(0);
        xx_next(51) := xx(43) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(2) XOR 
            uu(1);
        xx_next(52) := xx(44) XOR uu(7) XOR uu(6) XOR uu(3) XOR uu(2);
        xx_next(53) := xx(45) XOR uu(6) XOR uu(5) XOR uu(2) XOR uu(0);
        xx_next(54) := xx(46) XOR uu(5) XOR uu(4) XOR uu(2) XOR uu(1) XOR 
            uu(0);
        xx_next(55) := xx(47) XOR uu(7) XOR uu(4) XOR uu(1) XOR uu(0);
        xx_next(56) := xx(48) XOR uu(5) XOR uu(2) XOR uu(1);
        xx_next(57) := xx(49) XOR uu(6) XOR uu(3) XOR uu(2);
        xx_next(58) := xx(50) XOR uu(6) XOR uu(5) XOR uu(2) XOR uu(0);
        xx_next(59) := xx(51) XOR uu(5) XOR uu(4) XOR uu(2) XOR uu(1) XOR 
            uu(0);
        xx_next(60) := xx(52) XOR uu(6) XOR uu(5) XOR uu(3) XOR uu(2) XOR 
            uu(1);
        xx_next(61) := xx(53) XOR uu(5) XOR uu(0);
        xx_next(62) := xx(54) XOR uu(7) XOR uu(5) XOR uu(4) XOR uu(3) XOR 
            uu(2) XOR uu(1) XOR uu(0);
        xx_next(63) := xx(55) XOR uu(6) XOR uu(5) XOR uu(4) XOR uu(3) XOR 
            uu(2) XOR uu(1);

        -- sequential part: 

        IF reset = '1' THEN

            FOR i IN 0 TO nn-1 LOOP
                rr(i) <= '0';
                xx(i) <= '0';
            END LOOP;

            out_enb <= '0';

        ELSIF clk = '1' AND clk'EVENT THEN
            IF enable = '1' THEN

                    --read input

                out_enb <= '1';

                FOR i IN 0 TO nn-1 LOOP
                    rr(i) <= xx_next(i);
                    xx(i) <= xx_next(i);
                END LOOP;

            END IF;
        END IF;

    END PROCESS;

END rtl; -- OF bch_enc
-------------------------------------------------------------------------------
-- Parallel Encoder (ENTITY)
-- automatically generated by program 'venomgen'
-- 
-- Date Sat Jun 28 13:47:53 2014
-- 
-- poly: x^15 + x^11 + x^10 + x^9 + x^8 + x^7 + x^5 + x^3 + x^2 + x^1 + 1
-------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY bch_enc IS
    PORT (
        clk     : IN    STD_LOGIC;
        enable  : IN    STD_LOGIC;
        reset   : IN    STD_LOGIC;
        d_in    : IN    STD_LOGIC_VECTOR(0 DOWNTO 0);
        out_enb : OUT   STD_LOGIC;
        rr      : OUT   STD_LOGIC_VECTOR(14 DOWNTO 0)
        );
END bch_enc;

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- Parallel Encoder (ARCHITECTURE)
-- automatically generated by program 'venomgen'
-- 
-- Date Sat Jun 28 13:47:53 2014
-- 
-- poly: x^15 + x^11 + x^10 + x^9 + x^8 + x^7 + x^5 + x^3 + x^2 + x^1 + 1
-------------------------------------------------------------------------------

ARCHITECTURE rtl OF bch_enc IS

    CONSTANT nn    : INTEGER := 15;
        -- size of redundancy register

    CONSTANT bw    : INTEGER := 1;
        -- size of input words

-------------------------------------------------------------------------------

    SIGNAL xx        : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        -- copy of redundancy register for reading

-------------------------------------------------------------------------------

BEGIN

    main:
    PROCESS (clk,d_in,xx,reset)

        VARIABLE xx_next   : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        VARIABLE uu        : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);

    BEGIN

        -- combinatorial part: 

        FOR i IN 0 TO bw-1 LOOP
            uu(i) := d_in(i) XOR xx(nn-bw+i);
        END LOOP;

        xx_next(0) := uu(0);
        xx_next(1) := xx(0) XOR uu(0);
        xx_next(2) := xx(1) XOR uu(0);
        xx_next(3) := xx(2) XOR uu(0);
        xx_next(4) := xx(3);
        xx_next(5) := xx(4) XOR uu(0);
        xx_next(6) := xx(5);
        xx_next(7) := xx(6) XOR uu(0);
        xx_next(8) := xx(7) XOR uu(0);
        xx_next(9) := xx(8) XOR uu(0);
        xx_next(10) := xx(9) XOR uu(0);
        xx_next(11) := xx(10) XOR uu(0);
        xx_next(12) := xx(11);
        xx_next(13) := xx(12);
        xx_next(14) := xx(13);

        -- sequential part: 

        IF reset = '1' THEN

            FOR i IN 0 TO nn-1 LOOP
                rr(i) <= '0';
                xx(i) <= '0';
            END LOOP;

            out_enb <= '0';

        ELSIF clk = '1' AND clk'EVENT THEN
            IF enable = '1' THEN

                    --read input

                out_enb <= '1';

                FOR i IN 0 TO nn-1 LOOP
                    rr(i) <= xx_next(i);
                    xx(i) <= xx_next(i);
                END LOOP;

            END IF;
        END IF;

    END PROCESS;

END rtl; -- OF bch_enc
-------------------------------------------------------------------------------
-- Parallel Encoder (ENTITY)
-- automatically generated by program 'venomgen'
-- 
-- Date Sat Jun 28 13:48:01 2014
-- 
-- poly: x^18 + x^17 + x^16 + x^15 + x^9 + x^7 + x^6 + x^3 + x^2 + x^1 + 1
-------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

ENTITY bch_enc IS
    PORT (
        clk     : IN    STD_LOGIC;
        enable  : IN    STD_LOGIC;
        reset   : IN    STD_LOGIC;
        d_in    : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
        out_enb : OUT   STD_LOGIC;
        rr      : OUT   STD_LOGIC_VECTOR(17 DOWNTO 0)
        );
END bch_enc;

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- Parallel Encoder (ARCHITECTURE)
-- automatically generated by program 'venomgen'
-- 
-- Date Sat Jun 28 13:48:01 2014
-- 
-- poly: x^18 + x^17 + x^16 + x^15 + x^9 + x^7 + x^6 + x^3 + x^2 + x^1 + 1
-------------------------------------------------------------------------------

ARCHITECTURE rtl OF bch_enc IS

    CONSTANT nn    : INTEGER := 18;
        -- size of redundancy register

    CONSTANT bw    : INTEGER := 8;
        -- size of input words

    CONSTANT bw_2  : INTEGER := 6;
        -- size of last input

-------------------------------------------------------------------------------

    SIGNAL   slct  :  STD_LOGIC;
        -- signal state of coding

    SIGNAL xx        : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        -- copy of redundancy register for reading

-------------------------------------------------------------------------------

BEGIN

    control:
    PROCESS (clk,reset,enable)

    VARIABLE   b_cnt : INTEGER RANGE 0 TO 1;
    BEGIN
        IF reset = '1' THEN
            b_cnt := 0;
            slct <= '0';
        ELSIF clk = '1' AND clk'EVENT THEN
            IF enable = '1' THEN
                IF b_cnt = 0  THEN
                    slct <= '1';
                    b_cnt :=  b_cnt + 1;
                ELSIF b_cnt = 1 THEN
                    slct <= '0';
                    b_cnt := 0;
                ELSE
                    b_cnt :=  b_cnt + 1;
                END IF;
            END IF;
        END IF;
    END PROCESS; 


    main:
    PROCESS (clk,d_in,xx,reset)

        VARIABLE xx_next   : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        VARIABLE yy_next   : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        VARIABLE uu        : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);
        VARIABLE vv        : STD_LOGIC_VECTOR(nn-1 DOWNTO 0);

    BEGIN

        -- combinatorial part: 

        FOR i IN 0 TO bw-1 LOOP
            uu(i) := d_in(i) XOR xx(nn-bw+i);
        END LOOP;

        xx_next(0) := uu(5) XOR uu(4) XOR uu(1) XOR uu(0);
        xx_next(1) := uu(6) XOR uu(4) XOR uu(2) XOR uu(0);
        xx_next(2) := uu(7) XOR uu(4) XOR uu(3) XOR uu(0);
        xx_next(3) := uu(0);
        xx_next(4) := uu(1);
        xx_next(5) := uu(2);
        xx_next(6) := uu(5) XOR uu(4) XOR uu(3) XOR uu(1) XOR uu(0);
        xx_next(7) := uu(6) XOR uu(2) XOR uu(0);
        xx_next(8) := xx(0) XOR uu(7) XOR uu(3) XOR uu(1);
        xx_next(9) := xx(1) XOR uu(5) XOR uu(2) XOR uu(1) XOR uu(0);
        xx_next(10) := xx(2) XOR uu(6) XOR uu(3) XOR uu(2) XOR uu(1);
        xx_next(11) := xx(3) XOR uu(7) XOR uu(4) XOR uu(3) XOR uu(2);
        xx_next(12) := xx(4) XOR uu(5) XOR uu(4) XOR uu(3);
        xx_next(13) := xx(5) XOR uu(6) XOR uu(5) XOR uu(4);
        xx_next(14) := xx(6) XOR uu(7) XOR uu(6) XOR uu(5);
        xx_next(15) := xx(7) XOR uu(7) XOR uu(6) XOR uu(5) XOR uu(4) XOR uu(1)
         XOR uu(0);
        xx_next(16) := xx(8) XOR uu(7) XOR uu(6) XOR uu(4) XOR uu(2) XOR uu(0)
            ;
        xx_next(17) := xx(9) XOR uu(7) XOR uu(4) XOR uu(3) XOR uu(0);

        -- different last transfer :

        FOR i IN 0 TO bw_2-1 LOOP
            vv(i) := d_in(i+bw-bw_2) XOR xx(nn-bw_2+i);
        END LOOP;
        yy_next(0) := vv(5) XOR vv(4) XOR vv(1) XOR vv(0);
        yy_next(1) := vv(4) XOR vv(2) XOR vv(0);
        yy_next(2) := vv(4) XOR vv(3) XOR vv(0);
        yy_next(3) := vv(0);
        yy_next(4) := vv(1);
        yy_next(5) := vv(2);

        yy_next(6) := xx(0) XOR vv(5) XOR vv(4) XOR vv(3) XOR vv(1) XOR vv(0)
            ;
        yy_next(7) := xx(1) XOR vv(2) XOR vv(0);
        yy_next(8) := xx(2) XOR vv(3) XOR vv(1);
        yy_next(9) := xx(3) XOR vv(5) XOR vv(2) XOR vv(1) XOR vv(0);
        yy_next(10) := xx(4) XOR vv(3) XOR vv(2) XOR vv(1);
        yy_next(11) := xx(5) XOR vv(4) XOR vv(3) XOR vv(2);
        yy_next(12) := xx(6) XOR vv(5) XOR vv(4) XOR vv(3);
        yy_next(13) := xx(7) XOR vv(5) XOR vv(4);
        yy_next(14) := xx(8) XOR vv(5);
        yy_next(15) := xx(9) XOR vv(5) XOR vv(4) XOR vv(1) XOR vv(0);
        yy_next(16) := xx(10) XOR vv(4) XOR vv(2) XOR vv(0);
        yy_next(17) := xx(11) XOR vv(4) XOR vv(3) XOR vv(0);


        -- sequential part: 

        IF reset = '1' THEN

            FOR i IN 0 TO nn-1 LOOP
                rr(i) <= '0';
                xx(i) <= '0';
            END LOOP;

            out_enb <= '0';

        ELSIF clk = '1' AND clk'EVENT THEN
            IF enable = '1' THEN

                    --read input

                out_enb <= '1';

                FOR i IN 0 TO nn-1 LOOP
                    IF slct = '0' THEN
                        rr(i) <= xx_next(i);
                        xx(i) <= xx_next(i);
                    ELSE
                        rr(i) <= yy_next(i);
                        xx(i) <= yy_next(i);
                    END IF;
                END LOOP;

            END IF;
        END IF;

    END PROCESS;

END rtl; -- OF bch_enc
